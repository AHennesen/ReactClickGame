{"version":3,"sources":["components/ImageCard/index.js","components/Hero/index.js","components/Footer/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","id","src","image","onClick","imageClick","Hero","Footer","href","Navbar","role","aria-label","score","App","state","images","clickedImage","event","currentImages","target","_this","indexOf","setState","sort","b","Math","random","swal","title","text","button","concat","_this2","this","Fragment","components_Navbar","components_Hero","map","components_ImageCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qpDASeA,MANf,SAAoBC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,IAAOL,EAAMM,GAAIC,IAAOP,EAAMQ,MAAOC,QAAST,EAAMU,oBCarEC,MAff,WACE,OACEV,EAAAC,EAAAC,cAAA,WAASC,UAAU,0BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaG,IAAI,iEAAiEF,IAAI,kBACrGJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,mGCMKQ,MAZf,WACE,OACEX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,KAAGU,KAAK,8CAA8CP,GAAG,cACvDL,EAAAC,EAAAC,cAAA,uCCQKW,MAbf,SAAgBd,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBW,KAAK,aAAaC,aAAW,mBAChEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,uBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,UAAyDJ,EAAMiB,iCCmFxDC,6MAlFbC,MAAQ,CACNC,SACAC,aAAc,GACdJ,MAAO,KAGTP,WAAa,SAAAY,GACX,IAAMC,EAAgBD,EAAME,OAAOnB,IACNoB,EAAKN,MAAME,aAAaK,QAAQH,IAAkB,GAI/EE,EAAKE,SAAS,CACZP,OAAQK,EAAKN,MAAMC,OAAOQ,KAAK,SAAS1B,EAAG2B,GACzC,MAAO,GAAMC,KAAKC,WAEpBV,aAAc,GACdJ,MAAO,IAETe,IAAK,CACHC,MAAO,YACPC,KAAM,kDACNC,OAAQ,gBAIVV,EAAKE,SACH,CACEP,OAAQK,EAAKN,MAAMC,OAAOQ,KAAK,SAAS1B,EAAG2B,GACzC,MAAO,GAAMC,KAAKC,WAEpBV,aAAcI,EAAKN,MAAME,aAAae,OACpCb,GAEFN,MAAOQ,EAAKN,MAAMF,MAAQ,GAG5B,WAC2B,KAArBQ,EAAKN,MAAMF,QACbe,IAAK,CACHC,MAAO,OACPC,KAAM,4BACNC,OAAQ,WAEVV,EAAKE,SAAS,CACZP,OAAQK,EAAKN,MAAMC,OAAOQ,KAAK,SAAS1B,EAAG2B,GACzC,MAAO,GAAMC,KAAKC,WAEpBV,aAAc,GACdJ,MAAO,gFASX,IAAAoB,EAAAC,KACN,OACErC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqC,SAAA,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,CAAQvB,MAAOqB,KAAKnB,MAAMF,QAC1BhB,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBAEhBkC,KAAKnB,MAAMC,OAAOsB,IAAI,SAAAlC,GAAK,OAC1BP,EAAAC,EAAAC,cAACwC,EAAD,CACEjC,WAAY2B,EAAK3B,WACjBJ,GAAIE,EAAMF,GACVsC,IAAKpC,EAAMF,GACXE,MAAOA,EAAMA,WAKnBP,EAAAC,EAAAC,cAAC0C,EAAD,cA5EYC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6751388b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImageCard (props) {\r\n    return (\r\n        <img className = 'card' alt = {props.id} src = {props.image} onClick={props.imageClick} />\r\n    )\r\n};\r\n\r\nexport default ImageCard; ","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Hero() {\r\n  return (\r\n    <section className='hero has-text-centered'>\r\n      <div className='hero-body'>\r\n        <div className='container'>\r\n          <img className=\"title-logo\" src='https://live.staticflickr.com/7080/7045754353_69be16c74d_b.jpg' alt='Painting game' />\r\n          <h2 className='subtitle'>\r\n            Click on a painting to earn points, if you click on the same painting twice you lose.\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Hero","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className='footer is-fixed-bottom'>\r\n      <div className='content has-text-centered'>\r\n        <a href=\"https://github.com/AHennesen/ReactClickGame\" id=\"githubLink\">\r\n          <h5>Andrew Hennesen</h5>\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\r\n      <div className=\"navbar-brand\">\r\n        <h1 className=\"navbar-item title has-text-white\">Know Your Art Game</h1>\r\n      </div>\r\n      <div className=\"navbar-end\">\r\n        <h1 className=\"navbar-item title has-text-white\">Score: {props.score}</h1>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\nimport './App.css';\nimport ImageCard from \"./components/ImageCard\";\nimport Hero from './components/Hero';\nimport Footer from './components/Footer'\nimport Navbar from './components/Navbar'\nimport images from './images.json';\nimport swal from 'sweetalert';\n\n\nclass App extends Component {\n  state = {\n    images, \n    clickedImage: [],\n    score: 0\n  }\n  // when a image is clicked it is taken out of the array\n  imageClick = event => {\n    const currentImages = event.target.alt;\n    const imagesAlreadyClicked = this.state.clickedImage.indexOf(currentImages) > -1;\n\n  // If an image that has been clicked on already is clicked it resets the score and reshuffles the images. \n  if (imagesAlreadyClicked) {\n    this.setState({\n      images: this.state.images.sort(function(a, b){\n        return 0.5 - Math.random()\n      }),\n      clickedImage: [],\n      score: 0\n    });\n    swal({\n      title: \"Not today\",\n      text: \"You sould get more cultured and then try again.\",\n      button: \"Once more?\"\n    });\n    // When an image is clicked that hasn't been clicked before it adds +1 to the score\n  } else {\n    this.setState(\n      {\n        images: this.state.images.sort(function(a, b){\n          return 0.5 - Math.random()\n        }),\n        clickedImage: this.state.clickedImage.concat(\n          currentImages\n        ),\n        score: this.state.score + 1\n      },\n      // when all 12 images are clicked you get a message saying good job.  Board also resets.\n      () => {\n        if (this.state.score === 12) {\n          swal({\n            title: \"WOW!\",\n            text: \"YOU ARE CLASSY, GOOD JOB!\",\n            button: \"Again?\",\n          });\n          this.setState({\n            images: this.state.images.sort(function(a, b){\n              return 0.5 - Math.random();\n            }),\n            clickedImage: [],\n            score: 0\n          });\n        };\n      }\n    );\n  }\n  };\n\n// Componets are rendered in the following order: navbar, Hero, imageCard, footer\nrender(){\n  return (\n    <>\n      <Navbar score={this.state.score} />\n      <Hero />\n      <section className=\"section wrapper\">\n\n        {this.state.images.map(image => (\n          <ImageCard\n            imageClick={this.imageClick}\n            id={image.id}\n            key={image.id}\n            image={image.image}\n          />\n        ))}\n\n      </section>\n      <Footer />\n    </>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}